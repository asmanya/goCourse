package main

import (
	"fmt"
	"time"
)

func main() {
	ticker := time.NewTicker(time.Second)
	stop := time.After(5 * time.Second)

	defer ticker.Stop()

	for {
		select{
		case tick := <-ticker.C:
			fmt.Println("Tick at:", tick)
		case <-stop:
			fmt.Println("Stopping ticker.")
			return
		}
	}
}
	
/*
======= SCHEDULING, LOGGING, PERIODIC TASKS, POLLING FOR UPDATES ===========

func periodicTask() {
	fmt.Println("Performing periodic task at:", time.Now())
}

func main() {
	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ticker.C:
			periodicTask()
		}
	}
}

func main() {

	ticker := time.NewTicker(2 * time.Second)
	defer ticker.Stop()
	// for tick := range ticker.C {
	// 	fmt.Println("tick at:", tick)
	// }

	i := 0
	for range 5 {
		i++
		fmt.Println(i)
	}

	for tick := range ticker.C {
		i++
		fmt.Println(tick)
	}

}
*/