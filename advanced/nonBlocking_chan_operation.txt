package main

import (
	"fmt"
	"time"
)

// =============== NON BLOCKING OPERATIONS IN REAL TIME SYSTEMS ===================

func main() {
	data := make(chan int)
	quit := make(chan bool)

	// consumer
	go func() {
		for {
			select {
			case d := <-data:
				fmt.Println("data recieved:", d)
			case <-quit:
				fmt.Println("Stopping...")
				return
			default:
				fmt.Println("Waiting for data.")
				time.Sleep(500 * time.Millisecond)
			}
		}
	}()
	
	// producer
	for i := range 5 {
		data <- i
		time.Sleep(time.Second)
	}

	quit <- true
	time.Sleep(time.Second)
}

/*
func main() {

	// =============== NON BLOCKING RECIEVE OPERATION ================
	ch := make(chan int)

	select {
	case msg := <-ch:
		fmt.Println("Received:", msg)
	default:
		fmt.Println("No message available.")
	}

	// ============== NON BLOCKING SEND OPERATION =====================
	select {
	case ch <- 1:
		fmt.Println("Sent message.")
	default:
		fmt.Println("Channel is not ready to recieve.")
	}
}
*/
