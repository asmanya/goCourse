package main

import (
	"fmt"
	"sync"
)

func main() {
	var counter int
	var wg sync.WaitGroup
	var mu sync.Mutex

	numGoRoutines := 5
	wg.Add(numGoRoutines)

	increment := func() {
		defer wg.Done()
		for range 1000 {
			mu.Lock()
			counter++
			mu.Unlock()
		}
	}

	for range numGoRoutines {
		go increment()
	}

	wg.Wait()

	fmt.Println("final counter value:",counter)
}


/*
type counter struct {
	mu    sync.Mutex
	count int
}

func (c *counter) increment() {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.count++
}

func (c *counter) getValue() int {
	c.mu.Lock()
	defer c.mu.Unlock()
	return c.count
}

func main() {

	var wg sync.WaitGroup
	counter := &counter{}

	numGoRoutines := 10

	// wg.Add(numGoRoutines)

	for range numGoRoutines {
		wg.Add(1)
		go func() {
			defer wg.Done()
			for range 1000 {
				counter.increment()
			}
		}()
	}

	wg.Wait()
	fmt.Printf("Final counter value: %d\n", counter.getValue())

}
*/


/* mutex is mutual exclusion - not allowing multiple thread or process to access a data concurrently. only one can access at a time */
