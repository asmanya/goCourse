package main

import (
	"fmt"
	"sync"
	"time"
)

func main() {

	var mu1, mu2 sync.Mutex

	go func() {
		mu1.Lock()
		fmt.Println("goroutine 1 locked mu1")
		time.Sleep(time.Second)
		mu2.Lock()
		fmt.Println("goroutine 1 locked mu2")
		mu1.Unlock()
		mu2.Unlock()
	}()
	
	go func() {
		mu2.Lock()
		fmt.Println("goroutine 2 locked mu1")
		time.Sleep(time.Second)
		mu1.Lock()
		fmt.Println("goroutine 2 locked mu2")
		mu2.Unlock()
		mu1.Unlock()
	}()

	// time.Sleep(3 * time.Second)
	// fmt.Println("main function completed")

	select{} // -> this gives the deadlock error

}

// in case there is a consistent lock order of mutex, then there is no deadlock