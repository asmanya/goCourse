package main

import (
	"fmt"
	"math"
)

type geometry interface {
	area() float64
	perim() float64
}

type rectangle struct {
	width, length float64
}

type circle struct {
	radius float64
}

func (r rectangle) area() float64 {
	return r.length * r.width
}

func (r rectangle) perim() float64 {
	return 2 * (r.length + r.width)
}

func (c circle) area() float64 {
	return math.Pi * c.radius * c.radius
}

func (c circle) perim() float64 {
	return 2 * math.Pi * c.radius
}

func (c circle) diameter() float64 {
	return 2 * c.radius
}

func measure(g geometry) {
	fmt.Println("the geometry dimensions are", g)
	fmt.Println("the area of geometry is" ,g.area())
	fmt.Println("the perimeter of geometry is", g.perim())
}

func main() {

	r := rectangle{
		width:  3,
		length: 4,
	}

	c := circle{
		radius: 5,
	}
	fmt.Println("the diameter of circle is", c.diameter())

	measure(r)
	measure(c)

	myPrinter(2,"sdfew", 4232, "dss", "a")
	printType(9)
	printType("sds")
	printType('s')
	printType('ã‚¢')
}

func myPrinter(i ...interface{}) {
	for _, v := range i {
		fmt.Println(v)
	}
}

func printType(i interface{}) {
	fmt.Printf("type is %T\n", i)
}