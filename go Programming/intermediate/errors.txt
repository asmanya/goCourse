package main

import (
	"errors"
	"fmt"
)

/*
func sqrt(x float64) (float64, error) {
	if x < 0 {
		return 0, errors.New("math error: square root of a negative number")
	}

	return 1, nil
}

func process(data []byte) error {
	if len(data) == 0 {
		return errors.New("empty data")
	}

	return nil
}

type myError struct {
	message string
}

func (e *myError) Error() string {
	return fmt.Sprintf("Error: %s\n", e.message)
}

func eprocess() error {
	return &myError{"Custom error message"}
}
*/

func readConfig() error {
	return errors.New("config error")
}

func readData() error {
	err := readConfig()
	if err != nil {
		return fmt.Errorf("readData: %w", err)
	}

	return nil
}

func main() {
/*
	res, err := sqrt(16)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(res)
	
	res1, err1 := sqrt(-16)
	if err1 != nil {
		fmt.Println(err1)
	}
	fmt.Println(res1)
	
	data := []byte{}
	if err := process(data); err != nil {
		fmt.Println("Error:", err)
		return
	}
	
	fmt.Println("Data processed successfully")
	
	if err1 := eprocess(); err1 != nil {
		fmt.Println(err1)
		return
	}
	
	fmt.Println("Data processed successfully")
*/

	if err := readData(); err != nil {
		fmt.Println(err)
		return
	}

	fmt.Println("data read successfully")

}