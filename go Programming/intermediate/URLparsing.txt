package main

import (
	"fmt"
	"net/url"
)

func main() {

	// [scheme://][userinfo@]host[:port][/path][?query][#fragment]

	rawURL := "https://example.com:8080/path/course?query=param&query2=param2#fragment"

	parsedURL, err := url.Parse(rawURL)
	if err != nil {
		fmt.Println("Error parsing URL", err)
		return
	}

	fmt.Println("Scheme:", parsedURL.Scheme)
	fmt.Println("Host:", parsedURL.Host)
	fmt.Println("Port:", parsedURL.Port())
	fmt.Println("Path:", parsedURL.Path)
	fmt.Println("RawQuery:", parsedURL.RawQuery)
	fmt.Println("RawFragment:", parsedURL.Fragment)

	rawURL1 := "https://example.com/path?name=John&age=30"
	parsedURL, err = url.Parse(rawURL1)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	queryParams := parsedURL.Query()
	fmt.Println(queryParams)
	fmt.Println("Name:", queryParams.Get("name"))
	fmt.Println("Age:", queryParams.Get("age"))

	// Building URL
	baseURL := &url.URL{
		Scheme: "https",
		Host: "example.com",
		Path: "/path",
		Fragment: "frags",
	}

	query := baseURL.Query()
	query.Set("name", "John")
	query.Set("age", "30")
	query.Set("place", "Delhi")
	baseURL.RawQuery = query.Encode()

	fmt.Println("Built URL:", baseURL.String())

	values := url.Values{}

	// key value pairs to the values object
	values.Add("name", "jane")
	values.Add("age", "30")
	values.Add("city", "London")
	values.Add("country", "UK")

	// encode
	encodedQuery := values.Encode()
	fmt.Println(encodedQuery)

	// building the URL
	baseURL1 := "https://example.cpm/search"
	fullURL := baseURL1 + "?" + encodedQuery

	fmt.Println(fullURL)

}