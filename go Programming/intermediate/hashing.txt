package main

import (
	"crypto/rand"
	"crypto/sha256"
	// "crypto/sha512"
	"encoding/base64"
	"fmt"
	"io"
)

func main() {

	password := "passwor322321d123"
	password1 := "passwor322321d1232"
/*
	hash256 := sha256.Sum256([]byte(password))
	hash512 := sha512.Sum512([]byte(password))

	fmt.Println(password)
	fmt.Println("SHA256 value:", hash256)
	fmt.Println("SHA512 value:", hash512)

	fmt.Printf("SHA256 hash hex value: %x\n", hash256)
	fmt.Printf("SHA256 hash hex value: %x\n", hash512)
*/
	// Salting
	salt, err := generateSalt()
	fmt.Println("Original Salt:", salt)
	if err != nil {
		fmt.Println("Error generating salt:", err)
		return
	}

	// hash the password with salt
	signupHash := hashPassword(password, salt)

	// Store the salt and password in database, just printing rn
	saltStr := base64.StdEncoding.EncodeToString(salt)
	fmt.Println("Salt:", saltStr)
	fmt.Println("Hash:", signupHash)

	// verify
	// retrieve the salt string and decode it
	decodeSalt, err := base64.StdEncoding.DecodeString(saltStr)
	if err != nil {
		fmt.Println("Unable to decode salt")
	}

	loginHash := hashPassword(password1, decodeSalt)

	//compare the stored hash with the login hash
	if signupHash == loginHash {
		fmt.Println("Password is correct, You are logged in!")
	} else {
		fmt.Println("login failed. Please check user credentials")
	}
}

func generateSalt() ([]byte, error) {
	salt := make([]byte, 16)
	_, err := io.ReadFull(rand.Reader, salt)
	if err != nil {
		return nil, err
	}

	return salt, nil
}

// function to hash password
func hashPassword(password string, salt []byte) string {
	saltedPassword := append(salt, []byte(password)...)
	hash := sha256.Sum256(saltedPassword)
	return base64.StdEncoding.EncodeToString(hash[:])
}