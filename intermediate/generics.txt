package main

import "fmt"

/*
func swap[T any](a, b T) (T, T) {
	return b, a
}
*/

type Stack[T any] struct {
	elements []T
}

func (s *Stack[T]) push(element T) {
	s.elements = append(s.elements, element)
}

func (s *Stack[T]) pop() (T, bool) {
	if len(s.elements) == 0 {
		var zero T
		return zero, false
	}

	element := s.elements[len(s.elements)-1]
	s.elements = s.elements[:len(s.elements)-1]

	return element, true
}

func (s *Stack[T]) isEmpty() bool {
	return len(s.elements) == 0
}

func (s Stack[T]) printSt() {

	if s.isEmpty() {
		println("Stack is empty.")
		return
	}

	fmt.Println("Stack elements are:")
	for _, v := range s.elements {
		fmt.Println(v)
	}
}

func main() {
/*
	x, y := 1, 2
	x, y = swap(x, y)

	fmt.Println(x, y)

	x_, y_ := "thisX", "thisY"
	x_, y_ = swap(x_, y_)

	fmt.Println(x_, y_)
*/

	intStack := Stack[int]{}
	intStack.push(1)
	intStack.push(2)
	intStack.push(3)
	intStack.push(4)
	intStack.push(5)
	intStack.push(6)
	intStack.pop()

	intStack.printSt()

	stringStack := Stack[string]{}
	stringStack.push("jane")
	stringStack.push("John")
	stringStack.push("Jeffery")
	
	stringStack.printSt()
	
	stringStack.pop()
	stringStack.pop()
	
	stringStack.printSt()

}